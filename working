extends CharacterBody2D
class_name AIEnemey
# Constants
const SPEED := 150
const JUMP_VELOCITY := -400
const GRAVITY := 900
const ATTACK_RANGE := 60.0
const ATTACK_COOLDOWN := 0.5

# Nodes
@onready var sprite: AnimatedSprite2D = $AnimatedSprite2D
@onready var player: Node2D = get_node("/root/ground/player")

# AI Decision Graph
var decision_graph = {
	"idle": {
		"enemy_near": "attack1",
		"low_health": "run",
		"jump_required": "jump_start",
		"default": "run"
	},
	"attack1": {
		"animation_done": "attack2",
		"enemy_dead": "idle",
		"default": "attack1"
	},
	"attack2": {
		"animation_done": "idle",
		"default": "attack2"
	},
	"run": {
		"obstacle": "jump_start",
		"enemy_near": "attack1",
		"default": "run"
	},
	"jump_start": {
		"default": "jump_loop"
	},
	"jump_loop": {
		"on_ground": "jump_end",
		"default": "jump_loop"
	},
	"jump_end": {
		"default": "idle"
	},
	"takeHit": {
	"animation_done": "idle", # Or "run" or anything else you prefer
	"health_low": "death",
	"default": "takeHit"
	},
	"death": {
		"default": "death"
	}
}

# State
var current_state := "idle"
var is_dead := false
var enemy_alive := true
var is_jumping := false
var enemy_in_range := false
var obstacle_in_path := false
var attack_timer := 0.0
var animation_done := false
var health = 100
var health_max = 100
var health_min = 0
var taking_damage = false
var is_roaming: bool
var damage_to_deal = 10

func _ready():
	play_animation("idle")
	sprite.connect("animation_finished", Callable(self, "_on_animation_finished"))

func _physics_process(delta):
	Global.AiDamageAmount = damage_to_deal
	Global.AiDamageZone = $AIdealDamage
	if is_dead:
		await get_tree().create_timer(1.0).timeout
		self.queue_free()
		return

	if not is_on_floor():
		velocity.y += GRAVITY * delta

	update_flags()
	face_player()
	update_state()
	handle_state()

	attack_timer -= delta
	move_and_slide()

func update_flags():
	var distance_to_player = global_position.distance_to(player.global_position)
	enemy_in_range = distance_to_player <= ATTACK_RANGE
	obstacle_in_path = false # Replace with raycast logic if needed

func update_state():
	var conditions = {
		"enemy_near": enemy_in_range,
		"enemy_dead": not enemy_alive,
		"enemy_alive": enemy_alive,
		"low_health": health < 30,
		"jump_required": obstacle_in_path,
		"on_ground": is_on_floor(),
		"health_low": health <= 0,
		"obstacle": obstacle_in_path,
		"animation_done": animation_done
	}

	var state_transitions = decision_graph.get(current_state, {})
	for condition in state_transitions.keys():
		if conditions.get(condition, false):
			current_state = state_transitions[condition]
			animation_done = false
			return

	current_state = state_transitions.get("default", "idle")

func handle_state():
	match current_state:
		"idle":
			velocity.x = 0
			play_animation("idle")
		"run":
			var dir = sign(player.global_position.x - global_position.x)
			velocity.x = dir * SPEED
			play_animation("run")
		"jump_start":
			if is_on_floor():
				velocity.y = JUMP_VELOCITY
				is_jumping = true
				play_animation("jump_start")
		"jump_loop":
			play_animation("jump_loop")
		"jump_end":
			is_jumping = false
			play_animation("jump_end")
		"attack1":
			velocity.x = 0
			if attack_timer <= 0:
				play_animation("attack1")
				attack_timer = ATTACK_COOLDOWN
		"attack2":
			velocity.x = 0
			if attack_timer <= 0:
				play_animation("attack2")
				attack_timer = ATTACK_COOLDOWN
		"takeHit":
			velocity.x = 0
			play_animation("takeHit")
		"death":
			is_dead = true
			velocity = Vector2.ZERO
			play_animation("death")

func play_animation(name: String):
	if not sprite.is_playing() or sprite.animation != name:
		sprite.speed_scale = 1.0
		sprite.play(name)

func face_player():
	sprite.flip_h = player.global_position.x < global_position.x


func _on_animation_finished():
	animation_done = true


func hit(damage: int):
	if is_dead:
		print("Hit ignored: already dead.")
		return
	print("AI hit! Damage taken: ", damage)

	health -= damage
	print("AI health now: ", health)

	animation_done = false # Force state change animation
	if health <= 0:
		print("AI died.")
		current_state = "death"
	else:
		print("AI still alive, transitioning to takeHit.")
		current_state = "takeHit"

func set_enemy_alive(value: bool):
	enemy_alive = value


func _on_a_ihit_box_area_entered(area: Area2D):
	if area == Global.playerDamageZone:
		var damage = Global.playerDamageAmount
		hit(damage) # <-- use the full damage handler
